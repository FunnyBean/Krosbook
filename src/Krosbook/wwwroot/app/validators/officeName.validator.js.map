{"version":3,"sources":["app/validators/officeName.validator.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAA4C,eAAe,CAAC,CAAA;AAC5D,sBAAyC,gBAAgB,CAAC,CAAA;AAC1D,+BAA4B,4BAA4B,CAAC,CAAA;AASzD;IAKE,6BAAoB,aAA2B;QALjD,iBAgCC;QA3BqB,kBAAa,GAAb,aAAa,CAAc;QAFvC,kBAAa,GAAG,IAAI,CAAC;QAG3B,IAAI,CAAC,aAAa,CAAC,UAAU,EAAE,CAAC,SAAS,CACvC,UAAA,IAAI,IAAK,KAAI,CAAC,OAAO,GAAG,IAAI,CAAC,IAAI,EAAE,CAAA,CAAA,CAAC,EACpC,UAAA,KAAK,IAAI,OAAA,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,EAAlB,CAAkB,CAC5B,CAAC;IACJ,CAAC;IAED,sCAAQ,GAAR,UAAS,CAAa;QACpB,oHAAoH;QACpH,EAAE,CAAA,CAAC,IAAI,CAAC,aAAa,IAAI,IAAI,IAAI,CAAC,CAAC,KAAK,IAAI,IAAI,CAAC;YAC/C,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC,KAAK,CAAC;QAC/B,EAAE,CAAA,CAAC,CAAC,CAAC,KAAK,IAAI,IAAI,CAAC;YACjB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;QAG5B,EAAE,CAAA,CAAC,IAAI,CAAC,aAAa,IAAI,CAAC,CAAC,KAAK,CAAC;YAC/B,MAAM,CAAC,IAAI,CAAC;QACd,EAAE,CAAA,CAAC,IAAI,CAAC,OAAO,CAAC,CAChB,CAAC;YACC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;gBAC7C,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,KAAK,CAAC;oBAClC,MAAM,CAAC,EAAC,kBAAkB,EAAE,IAAI,EAAC,CAAA;YACrC,CAAC;QACH,CAAC;QACD,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IArCH;QAAC,gBAAS,CAAC;YACT,QAAQ,EAAE,iEAAiE;YAC3E,SAAS,EAAE;gBACT,EAAE,OAAO,EAAE,qBAAa,EAAE,WAAW,EAAE,iBAAU,CAAC,cAAM,OAAA,mBAAmB,EAAnB,CAAmB,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,EAAE,8BAAa;aAC3G;SACF,CAAC;;2BAAA;IAkCF,0BAAC;AAAD,CAhCA,AAgCC,IAAA;AAhCY,2BAAmB,sBAgC/B,CAAA","file":"app/validators/officeName.validator.js","sourcesContent":["import {Directive, forwardRef, OnInit} from '@angular/core';\r\nimport {NG_VALIDATORS, FormControl} from '@angular/forms';\r\nimport {OfficeService} from '../services/office.service';\r\n\r\n@Directive({\r\n  selector: '[validateOfficeName][ngModel],[validateOfficeName][formControl]',\r\n  providers: [\r\n    { provide: NG_VALIDATORS, useExisting: forwardRef(() => OfficeNameValidator), multi: true }, OfficeService\r\n  ]\r\n})\r\n\r\nexport class OfficeNameValidator{\r\n\r\n  private offices;\r\n  private initialCValue = null;\r\n\r\n  constructor(private officeService:OfficeService) {\r\n    this.officeService.getOffices().subscribe(\r\n      data => {this.offices = data.json()},\r\n      error => console.log(error)\r\n    );\r\n  }\r\n\r\n  validate(c:FormControl){\r\n    //nastavenia pre správne fungovanie editovania - nahratie prvej hodnoty do premennej - ak je nová miestnosť tak NULL\r\n    if(this.initialCValue == null && c.value != null)\r\n      this.initialCValue = c.value;\r\n    if(c.value == null)\r\n      this.initialCValue = null;\r\n\r\n\r\n    if(this.initialCValue == c.value)\r\n      return null;\r\n    if(this.offices)\r\n    {\r\n      for (var i = 0; i < this.offices.length; i++) {\r\n        if (this.offices[i].name == c.value)\r\n          return {validateOfficeName: true}\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n}\r\n"],"sourceRoot":"/source/"}
{"version":3,"sources":["app/validators/equal.validator.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,qBAA0D,eAAe,CAAC,CAAA;AAC1E,sBAA0D,gBAAgB,CAAC,CAAA;AAU3E;IACE,wBAAgD,aAAqB,EAC3B,OAAe;QADT,kBAAa,GAAb,aAAa,CAAQ;QAC3B,YAAO,GAAP,OAAO,CAAQ;IAEzD,CAAC;IAED,sBAAY,qCAAS;aAArB;YACE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC;gBAAC,MAAM,CAAC,KAAK,CAAC;YAChC,MAAM,CAAC,IAAI,CAAC,OAAO,KAAK,MAAM,GAAG,IAAI,GAAE,KAAK,CAAC;QAC/C,CAAC;;;OAAA;IAED,iCAAQ,GAAR,UAAS,CAAkB;QACzB,aAAa;QACb,IAAI,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC;QAEhB,gBAAgB;QAChB,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAExC,kBAAkB;QAClB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,KAAK,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;YAC1C,MAAM,CAAC;gBACL,aAAa,EAAE,KAAK;aACrB,CAAA;QACH,CAAC;QACD,0BAA0B;QAC1B,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,KAAK,IAAI,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;YACzC,OAAO,CAAC,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;YACjC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC;gBAAC,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QACvD,CAAC;QAED,8BAA8B;QAC9B,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,KAAK,IAAI,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;YACzC,CAAC,CAAC,SAAS,CAAC;gBACV,aAAa,EAAE,KAAK;aACrB,CAAC,CAAA;QACJ,CAAC;QAED,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IA7CH;QAAC,gBAAS,CAAC;YACT,QAAQ,EAAE,wFAAwF;YAClG,SAAS,EAAE;gBACT,EAAE,OAAO,EAAE,qBAAa,EAAE,WAAW,EAAE,iBAAU,CAAC,cAAM,OAAA,cAAc,EAAd,CAAc,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE;aACvF;SACF,CAAC;mBAGc,gBAAS,CAAC,eAAe,CAAC;mBAC1B,gBAAS,CAAC,SAAS,CAAC;;sBAJlC;IAyCF,qBAAC;AAAD,CAvCA,AAuCC,IAAA;AAvCY,sBAAc,iBAuC1B,CAAA","file":"app/validators/equal.validator.js","sourcesContent":["import { Directive, forwardRef, provide, Attribute } from '@angular/core';\r\nimport { Validator, AbstractControl, NG_VALIDATORS } from '@angular/forms';\r\nimport {UserService} from \"../services/user.service\";\r\n\r\n@Directive({\r\n  selector: '[validateEqual][formControlName],[validateEqual][formControl],[validateEqual][ngModel]',\r\n  providers: [\r\n    { provide: NG_VALIDATORS, useExisting: forwardRef(() => EqualValidator), multi: true }\r\n  ]\r\n})\r\n\r\nexport class EqualValidator implements Validator {\r\n  constructor( @Attribute('validateEqual') public validateEqual: string,\r\n               @Attribute('reverse') public reverse: string) {\r\n\r\n  }\r\n\r\n  private get isReverse() {\r\n    if (!this.reverse) return false;\r\n    return this.reverse === 'true' ? true: false;\r\n  }\r\n\r\n  validate(c: AbstractControl): { [key: string]: any } {\r\n    // self value\r\n    let v = c.value;\r\n\r\n    // control value\r\n    let e = c.root.find(this.validateEqual);\r\n\r\n    // value not equal\r\n    if (e && v !== e.value && !this.isReverse) {\r\n      return {\r\n        validateEqual: false\r\n      }\r\n    }\r\n    // value equal and reverse\r\n    if (e && v === e.value && this.isReverse) {\r\n      delete e.errors['validateEqual'];\r\n      if (!Object.keys(e.errors).length) e.setErrors(null);\r\n    }\r\n\r\n    // value not equal and reverse\r\n    if (e && v !== e.value && this.isReverse) {\r\n      e.setErrors({\r\n        validateEqual: false\r\n      })\r\n    }\r\n\r\n    return null;\r\n  }\r\n}\r\n"],"sourceRoot":"/source/"}
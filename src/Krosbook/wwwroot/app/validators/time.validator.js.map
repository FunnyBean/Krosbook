{"version":3,"sources":["app/validators/time.validator.ts"],"names":[],"mappings":"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","file":"app/validators/time.validator.js","sourcesContent":["import {Directive, forwardRef, OnInit, Attribute} from '@angular/core';\r\nimport {NG_VALIDATORS, FormControl, AbstractControl, Validator} from '@angular/forms';\r\nimport {HolidayService} from '../services/holiday.service';\r\nimport * as moment from 'moment';\r\n\r\n@Directive({\r\n  selector: '[validateTime][ngModel],[validateTime][formControl]',\r\n  providers: [\r\n    { provide: NG_VALIDATORS, useExisting: forwardRef(() => TimeValidator), multi: true }\r\n  ]\r\n})\r\n\r\nexport class TimeValidator{\r\n  validate(c:FormControl){\r\n  //  if(c.value % 30 == 0 && c.value != 0)\r\n      if(c.value % 0.5 == 0  && c.value <= 11 && c.value > 0)\r\n      return null;\r\n    else return {validateTime: true}\r\n  }\r\n}\r\n\r\n@Directive({\r\n  selector: '[validateDate][ngModel],[validateDate][formControl]',\r\n  providers: [ HolidayService,\r\n    { provide: NG_VALIDATORS, useExisting: forwardRef(() => DateValidator), multi: true }\r\n  ]\r\n})\r\n\r\nexport class DateValidator{\r\n  constructor(private holidayService:HolidayService){ }\r\n\r\n  validate(c:FormControl){\r\n    var date = moment(c.value, \"YYYY-MM-DDTHH:mm\");\r\n    if(date.minute() % 30 == 0 && ((date.hour() >= 7 && date.hour() <= 18) || date.hour() == 0)  && date.day() != 6 && date.day() != 0 && !this.holidayService.isHoliday(date.format(\"DD/MM\"), date.format(\"YYYY\")))\r\n      return null;\r\n    else return {validateDate: true}\r\n  }\r\n}\r\n\r\n@Directive({\r\n  selector: '[validateDates][formControlName],[validateDates][formControl],[validateDates][ngModel]',\r\n  providers: [\r\n    { provide: NG_VALIDATORS, useExisting: forwardRef(() => DatesValidator), multi: true }\r\n  ]\r\n})\r\n\r\nexport class DatesValidator implements Validator {\r\n  constructor( @Attribute('validateDates') public validateDates: string) {\r\n\r\n  }\r\n  validate(c: AbstractControl): { [key: string]: any } {\r\n    // self value\r\n    let v = c.value;\r\n\r\n    // control value\r\n    let e = c.root.find(this.validateDates);\r\n\r\n    // value not equal\r\n    if (e && v <= e.value) {\r\n      return {\r\n        validateDates: false\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n}\r\n\r\n"],"sourceRoot":"/source/"}